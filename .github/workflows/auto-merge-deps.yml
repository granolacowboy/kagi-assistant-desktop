name: Auto-merge Dependencies

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (for testing)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y libegl1-mesa-dev libgl1-mesa-dev mesa-common-dev

      - name: Install frontend dependencies
        run: bun install

      - name: Run tests
        run: |
          # Run TypeScript checks
          npx tsc --noEmit
          
          # Test Rust compilation
          cd src-tauri
          cargo check --all-targets

      - name: Check PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();
            
            // Check if it's a dependency update
            const isDependencyUpdate = title.includes('bump') || title.includes('update') || title.includes('deps');
            
            // Check for security updates
            const isSecurityUpdate = title.includes('security') || title.includes('vulnerability') || title.includes('cve');
            
            // Check update type (patch, minor, major)
            const isPatch = title.includes('patch') || /\d+\.\d+\.\d+/.test(title);
            const isMinor = title.includes('minor') || /\d+\.\d+\.0/.test(title);
            const isMajor = title.includes('major') || /\d+\.0\.0/.test(title);
            
            console.log(`Dependency update: ${isDependencyUpdate}`);
            console.log(`Security update: ${isSecurityUpdate}`);
            console.log(`Patch: ${isPatch}, Minor: ${isMinor}, Major: ${isMajor}`);
            
            return {
              isDependencyUpdate,
              isSecurityUpdate,
              isPatch,
              isMinor,
              isMajor,
              shouldAutoMerge: isDependencyUpdate && (isPatch || isMinor || isSecurityUpdate)
            };

      - name: Wait for checks
        if: fromJSON(steps.pr-details.outputs.result).shouldAutoMerge
        uses: actions/github-script@v7
        with:
          script: |
            // Wait for all required checks to complete
            const maxAttempts = 30;
            const delayMs = 30000; // 30 seconds
            
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`Attempt ${attempt}/${maxAttempts}: Checking status...`);
              
              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });
              
              const allChecks = checks.data.check_runs;
              const pendingChecks = allChecks.filter(check => check.status !== 'completed');
              
              if (pendingChecks.length === 0) {
                const failedChecks = allChecks.filter(check => check.conclusion !== 'success' && check.conclusion !== 'skipped');
                
                if (failedChecks.length > 0) {
                  console.log('Some checks failed:', failedChecks.map(c => c.name));
                  core.setFailed('Required checks failed');
                  return;
                }
                
                console.log('All checks passed!');
                return;
              }
              
              console.log(`${pendingChecks.length} checks still pending...`);
              await new Promise(resolve => setTimeout(resolve, delayMs));
            }
            
            core.setFailed('Timeout waiting for checks to complete');

      - name: Auto-merge PR
        if: fromJSON(steps.pr-details.outputs.result).shouldAutoMerge
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                commit_title: `Auto-merge: ${context.payload.pull_request.title}`,
                commit_message: 'Automatically merged dependency update after successful checks',
                merge_method: 'squash'
              });
              
              console.log('âœ… PR auto-merged successfully!');
              
              // Trigger version bump workflow
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'version-bump.yml',
                ref: 'main',
                inputs: {
                  update_type: 'patch'
                }
              });
              
            } catch (error) {
              console.error('Failed to auto-merge:', error);
              core.setFailed(`Auto-merge failed: ${error.message}`);
            }

      - name: Comment on PR
        if: fromJSON(steps.pr-details.outputs.result).shouldAutoMerge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: 'ðŸ¤– This dependency update has been automatically merged after passing all checks and tests. A new patch version will be released automatically.'
            });