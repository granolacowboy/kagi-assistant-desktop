name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # Validation and Testing
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.changes.outputs.should_build }}
      has_frontend_changes: ${{ steps.changes.outputs.has_frontend_changes }}
      has_backend_changes: ${{ steps.changes.outputs.has_backend_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
            # For push events, if BASE_SHA is empty or all zeros, compare with HEAD~1
            if [ -z "$BASE_SHA" ] || [ "$BASE_SHA" = "0000000000000000000000000000000000000000" ]; then
              BASE_SHA="HEAD~1"
            fi
          fi
          
          echo "Comparing $BASE_SHA..$HEAD_SHA"
          
          # Check for changes in different areas
          FRONTEND_CHANGES=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep -E "\.(js|ts|html|css|json)$" | grep -v "src-tauri/" | wc -l)
          BACKEND_CHANGES=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep -E "(src-tauri/|\.rs$|Cargo\.(toml|lock))" | wc -l)
          WORKFLOW_CHANGES=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep -E "\.github/workflows/" | wc -l)
          CONFIG_CHANGES=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep -E "(package\.json|bun\.lockb|\.gitignore|README\.md)" | wc -l)
          
          echo "Frontend changes: $FRONTEND_CHANGES"
          echo "Backend changes: $BACKEND_CHANGES"
          echo "Workflow changes: $WORKFLOW_CHANGES"
          echo "Config changes: $CONFIG_CHANGES"
          
          # Determine if we should build
          if [ $FRONTEND_CHANGES -gt 0 ] || [ $BACKEND_CHANGES -gt 0 ] || [ $WORKFLOW_CHANGES -gt 0 ] || [ $CONFIG_CHANGES -gt 0 ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
          
          echo "has_frontend_changes=$([[ $FRONTEND_CHANGES -gt 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_backend_changes=$([[ $BACKEND_CHANGES -gt 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        if: steps.changes.outputs.should_build == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup Bun
        if: steps.changes.outputs.should_build == 'true'
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        if: steps.changes.outputs.should_build == 'true'
        run: bun install

      - name: Check package vulnerabilities
        if: steps.changes.outputs.should_build == 'true'
        run: |
          # Quick vulnerability check
          npm audit --audit-level high --json > audit_results.json || true
          
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' audit_results.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' audit_results.json)
          
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "⚠️ High or critical vulnerabilities detected in dependencies!"
            echo "High: $HIGH_VULNS, Critical: $CRITICAL_VULNS"
            echo "Please review and update dependencies before proceeding."
            exit 1
          fi

      - name: Validate package.json
        if: steps.changes.outputs.has_frontend_changes == 'true'
        run: |
          # Validate package.json structure
          node -e "
            const pkg = require('./package.json');
            if (!pkg.name || !pkg.version || !pkg.scripts) {
              console.error('Invalid package.json structure');
              process.exit(1);
            }
            console.log('✓ package.json is valid');
          "

      - name: TypeScript type checking
        if: steps.changes.outputs.has_frontend_changes == 'true'
        run: |
          # Type check if TypeScript files exist
          if [ -f "tsconfig.json" ] && find . -name "*.ts" -not -path "./node_modules/*" | head -1 | grep -q .; then
            echo "Running TypeScript type checking..."
            npx tsc --noEmit
          else
            echo "No TypeScript files found, skipping type check"
          fi

  # Frontend Quality Checks
  frontend-quality:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.has_frontend_changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Frontend build test
        run: |
          # Test that frontend builds successfully
          if [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then
            echo "Building with Vite..."
            bun run build
          elif [ -f "webpack.config.js" ]; then
            echo "Building with Webpack..."
            bun run build
          else
            echo "No specific build configuration found, trying default build command..."
            bun run build || echo "No build script found"
          fi

      - name: Check bundle size
        run: |
          if [ -d "dist" ]; then
            BUNDLE_SIZE=$(du -sh dist | cut -f1)
            echo "📦 Bundle size: $BUNDLE_SIZE"
            echo "## Bundle Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **Total bundle size**: $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY
            
            # Check for large files
            find dist -type f -size +1M -exec ls -lh {} \; | while read line; do
              echo "- Large file: $line" >> $GITHUB_STEP_SUMMARY
            done
          fi

  # Backend Quality Checks  
  backend-quality:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.has_backend_changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Rust formatting check
        working-directory: src-tauri
        run: cargo fmt --all -- --check

      - name: Rust linting
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Rust tests
        working-directory: src-tauri
        run: cargo test --all-features

      - name: Check Cargo.toml dependencies
        working-directory: src-tauri
        run: |
          # Check for outdated dependencies
          cargo install cargo-outdated || true
          cargo outdated --exit-code 1 || echo "Some dependencies might be outdated"

  # Cross-platform build validation
  build-validation:
    needs: [validate, frontend-quality, backend-quality]
    if: always() && needs.validate.outputs.should_build == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y libegl1-mesa-dev libgl1-mesa-dev mesa-common-dev

      - name: Install frontend dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Build Tauri app (test build)
        working-directory: src-tauri
        run: |
          # Test build without creating bundles (faster)
          cargo build --release --target ${{ matrix.target }}

      - name: Test application startup (Linux)
        if: matrix.platform == 'ubuntu-latest'
        working-directory: src-tauri
        run: |
          # Test that the binary starts without crashing (headless)
          timeout 10s ./target/x86_64-unknown-linux-gnu/release/kagi-assistant-desktop --help || true

  # Security and compliance checks
  security-compliance:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: License compliance check
        run: |
          # Check for license files
          if [ ! -f "LICENSE" ] && [ ! -f "LICENSE.md" ] && [ ! -f "LICENSE.txt" ]; then
            echo "⚠️ No LICENSE file found"
            echo "Consider adding a license file for legal clarity"
          fi

      - name: Dependency license check
        run: |
          # Use license-checker if available
          if command -v npx &> /dev/null; then
            npx license-checker --summary || echo "license-checker not available, skipping"
          fi

      - name: Check for secrets in code
        run: |
          # Basic secret scanning
          echo "Checking for potential secrets..."
          
          # Check for common secret patterns
          if grep -r -E "(api[_-]?key|secret|password|token)" --include="*.js" --include="*.ts" --include="*.json" --exclude-dir=node_modules . | grep -v "example" | grep -v "placeholder"; then
            echo "⚠️ Potential secrets found in code!"
            echo "Please review the above matches to ensure no real secrets are committed."
          else
            echo "✓ No obvious secrets detected"
          fi

  # Performance and size checks
  performance:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: bun install

      - name: Build application
        run: |
          bun run build
          cd src-tauri && cargo build --release

      - name: Analyze binary size
        run: |
          if [ -f "src-tauri/target/release/kagi-assistant-desktop" ]; then
            BINARY_SIZE=$(du -sh src-tauri/target/release/kagi-assistant-desktop | cut -f1)
            echo "🔍 Binary size: $BINARY_SIZE"
            echo "## Performance Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **Binary size**: $BINARY_SIZE" >> $GITHUB_STEP_SUMMARY
            
            # Check binary dependencies
            echo "- **Dependencies**: $(ldd src-tauri/target/release/kagi-assistant-desktop | wc -l) shared libraries" >> $GITHUB_STEP_SUMMARY
          fi

  # Final status check
  ci-status:
    runs-on: ubuntu-latest
    needs: [validate, frontend-quality, backend-quality, build-validation, security-compliance, performance]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "## CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          
          # Check individual job statuses
          if [ "${{ needs.validate.result }}" = "success" ]; then
            echo "- ✅ **Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.frontend-quality.result }}" = "success" ] || [ "${{ needs.frontend-quality.result }}" = "skipped" ]; then
            echo "- ✅ **Frontend Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Frontend Quality**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.backend-quality.result }}" = "success" ] || [ "${{ needs.backend-quality.result }}" = "skipped" ]; then
            echo "- ✅ **Backend Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Backend Quality**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-validation.result }}" = "success" ]; then
            echo "- ✅ **Build Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Build Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-compliance.result }}" = "success" ]; then
            echo "- ✅ **Security & Compliance**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Security & Compliance**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance.result }}" = "success" ]; then
            echo "- ✅ **Performance Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Performance Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [ "${{ needs.validate.result }}" = "success" ] && \
             ([ "${{ needs.frontend-quality.result }}" = "success" ] || [ "${{ needs.frontend-quality.result }}" = "skipped" ]) && \
             ([ "${{ needs.backend-quality.result }}" = "success" ] || [ "${{ needs.backend-quality.result }}" = "skipped" ]) && \
             [ "${{ needs.build-validation.result }}" = "success" ] && \
             [ "${{ needs.security-compliance.result }}" = "success" ] && \
             [ "${{ needs.performance.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Overall Status**: All checks passed! Ready for merge/release." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Overall Status**: Some checks failed. Please review and fix issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Update PR with CI results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            
            // Get the summary that was created
            const summary = process.env.GITHUB_STEP_SUMMARY;
            
            // Create or update a comment with CI results
            const body = `## 🚀 CI/CD Pipeline Results
            
            This PR has been automatically tested across multiple dimensions:
            
            ### ✅ What was checked:
            - **Code Quality**: Formatting, linting, type checking
            - **Build Validation**: Cross-platform compatibility (Linux, Windows, macOS)  
            - **Security**: Vulnerability scanning, secret detection
            - **Performance**: Binary size analysis, dependency audit
            - **Compliance**: License checking, best practices
            
            ### 📊 Results:
            All automated checks have completed. See the "Actions" tab for detailed results.
            
            _This comment is automatically updated by the CI/CD pipeline._`;
            
            // Check for existing comments
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('CI/CD Pipeline Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body
              });
            }