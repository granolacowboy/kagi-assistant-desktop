name: Version Bump & Release

on:
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Version update type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides update_type)'
        required: false
        type: string
  schedule:
    # Auto-bump weekly if there are changes
    - cron: '0 10 * * 1'  # Monday at 10 AM

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for recent changes
        id: check-changes
        run: |
          # Check if there have been commits since the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)
          
          echo "Last tag: $LAST_TAG"
          echo "Commits since tag: $COMMITS_SINCE_TAG"
          
          if [ "$COMMITS_SINCE_TAG" -gt 0 ] || [ -n "${{ github.event.inputs.custom_version }}" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
            echo "commits_count=$COMMITS_SINCE_TAG" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected since last tag"
          fi

      - name: Determine version bump type
        if: steps.check-changes.outputs.changes == 'true'
        id: determine-bump
        run: |
          # Analyze recent commits to determine bump type
          COMMITS_SINCE_TAG=${{ steps.check-changes.outputs.commits_count }}
          LAST_TAG=${{ steps.check-changes.outputs.last_tag }}
          
          # Check commit messages for conventional commit patterns
          BREAKING_CHANGES=$(git log ${LAST_TAG}..HEAD --oneline | grep -E "(BREAKING|breaking)" | wc -l)
          FEATURES=$(git log ${LAST_TAG}..HEAD --oneline | grep -E "^[a-f0-9]+ (feat|feature)" | wc -l)
          FIXES=$(git log ${LAST_TAG}..HEAD --oneline | grep -E "^[a-f0-9]+ (fix|bugfix)" | wc -l)
          DEPS=$(git log ${LAST_TAG}..HEAD --oneline | grep -E "^[a-f0-9]+ (deps|chore)" | wc -l)
          
          # Override with custom version if provided
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            BUMP_TYPE="custom"
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          elif [ -n "${{ github.event.inputs.update_type }}" ]; then
            BUMP_TYPE="${{ github.event.inputs.update_type }}"
          elif [ "$BREAKING_CHANGES" -gt 0 ]; then
            BUMP_TYPE="major"
          elif [ "$FEATURES" -gt 0 ]; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          
          echo "Bump type determined: $BUMP_TYPE"
          echo "Breaking changes: $BREAKING_CHANGES"
          echo "Features: $FEATURES"
          echo "Fixes: $FIXES"
          echo "Dependencies: $DEPS"
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          if [ "$BUMP_TYPE" != "custom" ]; then
            echo "custom_version=" >> $GITHUB_OUTPUT
          else
            echo "custom_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-changes.outputs.changes == 'true'
        run: bun install

      - name: Get current version and calculate new version
        if: steps.check-changes.outputs.changes == 'true'
        id: version-calc
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          if [ -n "${{ steps.determine-bump.outputs.custom_version }}" ]; then
            NEW_VERSION="${{ steps.determine-bump.outputs.custom_version }}"
          else
            # Parse current version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            
            # Calculate new version based on bump type
            case "${{ steps.determine-bump.outputs.bump_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in files
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          NEW_VERSION="${{ steps.version-calc.outputs.new_version }}"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update Cargo.toml in src-tauri
          cd src-tauri
          sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" Cargo.toml
          
          # Update Cargo.lock
          cargo update --workspace
          
          cd ..
          
          # Update tauri.conf.json
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" src-tauri/tauri.conf.json

      - name: Generate changelog
        if: steps.check-changes.outputs.changes == 'true'
        id: changelog
        run: |
          NEW_VERSION="${{ steps.version-calc.outputs.new_version }}"
          LAST_TAG="${{ steps.check-changes.outputs.last_tag }}"
          
          # Create changelog entry
          echo "## v$NEW_VERSION - $(date +%Y-%m-%d)" > changelog_entry.md
          echo "" >> changelog_entry.md
          
          # Add commit messages as changelog
          echo "### Changes" >> changelog_entry.md
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges >> changelog_entry.md
          echo "" >> changelog_entry.md
          
          # Add dependency updates if any
          if git log ${LAST_TAG}..HEAD --oneline | grep -E "(deps|chore)" > /dev/null; then
            echo "" >> changelog_entry.md
            echo "### Dependencies" >> changelog_entry.md
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges | grep -E "(deps|chore)" >> changelog_entry.md
          fi
          
          # Prepend to existing CHANGELOG.md or create new one
          if [ -f CHANGELOG.md ]; then
            cat changelog_entry.md CHANGELOG.md > temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            mv changelog_entry.md CHANGELOG.md
          fi
          
          # Set output for release notes
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat changelog_entry.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          NEW_VERSION="${{ steps.version-calc.outputs.new_version }}"
          
          git add -A
          git commit -m "chore: bump version to v$NEW_VERSION [automated]

          - Updated package.json version
          - Updated Cargo.toml version
          - Updated tauri.conf.json version
          - Updated CHANGELOG.md
          
          Auto-generated by version-bump workflow"

      - name: Create and push tag
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          NEW_VERSION="${{ steps.version-calc.outputs.new_version }}"
          
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION

          ${{ steps.changelog.outputs.release_notes }}"
          
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Create summary
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          NEW_VERSION="${{ steps.version-calc.outputs.new_version }}"
          
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ **New Version**: v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Bump Type**: ${{ steps.determine-bump.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Commits Since Last Tag**: ${{ steps.check-changes.outputs.commits_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **Release Build**: Will be triggered automatically" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Notes" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.changelog.outputs.release_notes }}" >> $GITHUB_STEP_SUMMARY

      - name: No changes summary
        if: steps.check-changes.outputs.changes == 'false'
        run: |
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ℹ️ **Status**: No changes detected since last tag" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ **Last Tag**: ${{ steps.check-changes.outputs.last_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ **Action**: Skipping version bump" >> $GITHUB_STEP_SUMMARY